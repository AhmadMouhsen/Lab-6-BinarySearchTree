public class BinarySearchTree<E extends Comparable<E>> {

    private Node root;

    public BinarySearchTree() {
        root = null;
    }

    public class Node {
        private E data;
        private Node left;
        private Node right;

        public Node(E data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    public boolean add(E item) {
        if (root == null) {
            root = new Node(item);
            return true;
        } else {
            return add(root, item);
        }
    }

    private boolean add(Node node, E item) {
        if (item.equals(node.data)) {
            return false; // already in the tree
        } else if (item.compareTo(node.data) < 0) {
            if (node.left == null) {
                node.left = new Node(item);
                return true;
            } else {
                return add(node.left, item);
            }
        } else {
            if (node.right == null) {
                node.right = new Node(item);
                return true;
            } else {
                return add(node.right, item);
            }
        }
    }
